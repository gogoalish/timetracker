// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: people.sql

package repo

import (
	"context"
	"database/sql"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO people (name, surname, patronymic, address, passport_number, passport_serie) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreatePersonParams struct {
	Name           string         `json:"name"`
	Surname        string         `json:"surname"`
	Patronymic     sql.NullString `json:"patronymic"`
	Address        string         `json:"address"`
	PassportNumber int32          `json:"passport_number"`
	PassportSerie  int32          `json:"passport_serie"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPerson,
		arg.Name,
		arg.Surname,
		arg.Patronymic,
		arg.Address,
		arg.PassportNumber,
		arg.PassportSerie,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM people WHERE id = $1
`

func (q *Queries) DeletePerson(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const getPersonByID = `-- name: GetPersonByID :one
SELECT id, name, surname, patronymic, passport_number, passport_serie, address FROM people
WHERE id = $1
`

func (q *Queries) GetPersonByID(ctx context.Context, id int32) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPersonByID, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.PassportNumber,
		&i.PassportSerie,
		&i.Address,
	)
	return i, err
}

const getPersonByPassport = `-- name: GetPersonByPassport :one
SELECT id, name, surname, patronymic, passport_number, passport_serie, address FROM people
WHERE passport_number = $1 AND passport_serie = $2
`

type GetPersonByPassportParams struct {
	PassportNumber int32 `json:"passport_number"`
	PassportSerie  int32 `json:"passport_serie"`
}

func (q *Queries) GetPersonByPassport(ctx context.Context, arg GetPersonByPassportParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPersonByPassport, arg.PassportNumber, arg.PassportSerie)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.PassportNumber,
		&i.PassportSerie,
		&i.Address,
	)
	return i, err
}

const listPeople = `-- name: ListPeople :many
SELECT id, name, surname, patronymic, passport_number, passport_serie, address FROM people
WHERE
    ($1::int = 0 OR passport_serie = $1) AND
    ($2::int = 0 OR passport_number = $2) AND
    ($3::text = '' OR surname ILIKE '%' || $3 || '%') AND
    ($4::text = '' OR name ILIKE '%' || $4 || '%') AND
    ($5::text = '' OR patronymic ILIKE '%' || $5 || '%') AND
    ($6::text = '' OR address ILIKE '%' || $6 || '%')
ORDER BY id
`

type ListPeopleParams struct {
	PassportSerie  int32  `json:"passport_serie"`
	PassportNumber int32  `json:"passport_number"`
	Surname        string `json:"surname"`
	Name           string `json:"name"`
	Patronymic     string `json:"patronymic"`
	Address        string `json:"address"`
}

func (q *Queries) ListPeople(ctx context.Context, arg ListPeopleParams) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, listPeople,
		arg.PassportSerie,
		arg.PassportNumber,
		arg.Surname,
		arg.Name,
		arg.Patronymic,
		arg.Address,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Person{}
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Patronymic,
			&i.PassportNumber,
			&i.PassportSerie,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPeopleWithLimit = `-- name: ListPeopleWithLimit :many
SELECT id, name, surname, patronymic, passport_number, passport_serie, address FROM people
WHERE
    ($3::int = 0 OR passport_serie = $3) AND
    ($4::int = 0 OR passport_number = $4) AND
    ($5::text = '' OR surname ILIKE '%' || $5 || '%') AND
    ($6::text = '' OR name ILIKE '%' || $6 || '%') AND
    ($7::text = '' OR patronymic ILIKE '%' || $7 || '%') AND
    ($8::text = '' OR address ILIKE '%' || $8 || '%')
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListPeopleWithLimitParams struct {
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
	PassportSerie  int32  `json:"passport_serie"`
	PassportNumber int32  `json:"passport_number"`
	Surname        string `json:"surname"`
	Name           string `json:"name"`
	Patronymic     string `json:"patronymic"`
	Address        string `json:"address"`
}

func (q *Queries) ListPeopleWithLimit(ctx context.Context, arg ListPeopleWithLimitParams) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, listPeopleWithLimit,
		arg.Limit,
		arg.Offset,
		arg.PassportSerie,
		arg.PassportNumber,
		arg.Surname,
		arg.Name,
		arg.Patronymic,
		arg.Address,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Person{}
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Patronymic,
			&i.PassportNumber,
			&i.PassportSerie,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePerson = `-- name: UpdatePerson :exec
UPDATE people
SET 
    name = COALESCE(NULLIF($2, ''), name),
    surname = COALESCE(NULLIF($3, ''), surname),
    patronymic = COALESCE(NULLIF($4, ''), patronymic),
    address = COALESCE(NULLIF($5, ''), address),
    passport_serie = COALESCE(NULLIF($6, 0), passport_serie),
    passport_number = COALESCE(NULLIF($7, 0), passport_number)
WHERE id = $1
`

type UpdatePersonParams struct {
	ID             int32       `json:"id"`
	Name           interface{} `json:"name"`
	Surname        interface{} `json:"surname"`
	Patronymic     interface{} `json:"patronymic"`
	Address        interface{} `json:"address"`
	PassportSerie  interface{} `json:"passport_serie"`
	PassportNumber interface{} `json:"passport_number"`
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) error {
	_, err := q.db.ExecContext(ctx, updatePerson,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Patronymic,
		arg.Address,
		arg.PassportSerie,
		arg.PassportNumber,
	)
	return err
}
